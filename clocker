#!/usr/bin/env ruby

require 'yaml'
require 'pathname'

class Clocker

	CLOCKER_SKEL =
	{
		'project'    => '',
		'client'     => nil,
		'worker'     => nil,
		'work_types' => nil,
		'clocked_in' => false,
		'entires'    => [],
	}

	CLOCKER_FILE = 'Clockerfile'

	# Commands that may be run
	module Commands

		class InvalidCommand < Exception; end
		class NoCommandGiven < Exception; end

		# Initalize the CLOCKER_FILE, prompting for values
		def init
			clocker_file.create
			clocker_file.merge CLOCKER_SKEL
			puts "Created new #{clocker_file.file_name} in the current directory"
		end

		# Start the clock
		def start
			raise Clockerfile::NotFound if ! @clocker_file.loaded?

		end

		# Cancel the current running clock
		def cancel
			raise Clockerfile::NotFound if ! @clocker_file.loaded?

		end

		# Stop the clock and prompt for a description of the work done
		def stop
			raise Clockerfile::NotFound if ! @clocker_file.loaded?

		end

		# Print out the current status of the CLOCKER_FILE.
		def status
			raise Clockerfile::NotFound if ! @clocker_file.loaded?

		end

		# List all of the current clocked entries
		def list
			raise Clockerfile::NotFound if ! @clocker_file.loaded?

		end
	end

	include Commands

	# Represents the clocker file in the current or parent directories
	class Clockerfile < Hash

		class NotFound < Exception; end
		class Exists   < Exception; end

		def self.new(file_name = CLOCKER_FILE)
			directory = Pathname.getwd

			begin
				if File.exists?(path = directory + file_name)
					replace YAML.load(@file = File.new(path, 'r+'))
					break
				end
			end while ! (directory = directory.parent).root?

			object = super
			object.instance_variable_set :@file_name, file_name
			object
		end

		attr_reader :file_name

		# Check if the Clockerfile is loaded
		def loaded?
			! @file.nil?
		end

		# Create a new clocker file
		def create
			raise Exists if loaded?
			@file = File.new(@file_name, 'w')
		end

		# Write the current data to the Clockerfile
		def save()
			YAML.dump(self, @file)
			self
		end
	end

	# A contact organization or person
	class Contact

	end

	# A single work type, including name and price
	class WorkType

	end

	# A single time entry, includ
	class Entry

	end

	attr_reader   :argv
	attr_accessor :clocker_file

	# Initalize the clockerfile
	def initialize(argv)
		@argv = argv
		@clocker_file = Clockerfile.new

		command = @argv.shift

		begin
			raise Commands::NoCommandGiven if command.nil?
			raise Commands::InvalidCommand if ! Commands.instance_methods.include? command.to_sym

			send command
		rescue Commands::NoCommandGiven
			abort "Please specify a command"
		rescue Commands::InvalidCommand
			abort "The command '#{command}' is invalid"
		rescue Clockerfile::NotFound
			abort "No #{CLOCKER_FILE} found, run clocker init to create one"
		rescue Clockerfile::Exists
			abort "#{CLOCKER_FILE} already exists!"
		end

		clocker_file.save if clocker_file.loaded?
	end
end

# Start Clocker
Clocker.new(ARGV)
