#!/usr/bin/env ruby

$LOAD_PATH.unshift __dir__
require 'colorize'

require 'yaml'
require 'pathname'
require 'forwardable'
require 'tempfile'

class Clocker

	CLOCKER_SKEL =
	{
		'project'    => '',
		'clocked_in' => false,
		'client'     => nil,
		'worker'     => nil,
		'rates'      => {},
		'entries'    => [],
	}

	# Represents the clocker file in the current or parent directories
	class Clockerfile < Hash

		class NotFound < StandardError; end
		class Exists   < StandardError; end

		class AllreadyClockedIn < StandardError; end
		class NotClockedIn      < StandardError; end

		# Factory method to load a Clockerfile
		#
		# Attempt to load the Clockerfile data from a YAML file stored in the
		# current working directory or any of it's parent directories.
		def self.load(file_name)
			directory = cwd = Pathname.getwd

			# Recurse until we find it in the parent directory
			begin
				path = directory + file_name

				if File.exists? path
					object = YAML.load_file path
					object.file_path = path
					break
				end

				directory = directory.parent
			end until directory.root?

			# If we weren't able to find the Clockerfile create a new one
			object ||= new file_name
		end

		extend Forwardable
		def_delegator :@file_path, :exist?,   :exists?
		def_delegator :@file_path, :basename, :file_name

		attr_accessor :file_path

		# Initalize a new Clockerfile with the proper filepath
		def initialize(file_name = 'Clockerfile')
			@file_path ||= Pathname.getwd + file_name
			super
		end

		# Determine if we are currently clocked into the Clockerfile
		def clocked_in?
			return self['clocked_in'] != false
		end

		# Add a new entry into the Clockerfile
		def add_entry(entry)
			entry = Entry[entry] unless entry.is_a? Entry
			self['entries'] << entry
		end

		# Create a new clocker file
		def create(details)
			raise Exists if exists?
			File.new(file_name, 'w').close
			replace details
		end

		# Write the current data to the Clockerfile
		def save
			raise NotFound unless exists?
			YAML.dump(self, file = File.open(@file_path, 'w'))
			file.close
			self
		end
	end

	# A single time entry, includ
	class Entry < Hash

	end

	# Clocker CLI interfance
	class CLI

		DEFAULT_FILE = 'Clockerfile'

		# CLI prompts for data. This only contains class methods
		class << Prompt = Object.new

			# Prompt for the projects name
			def project
				{ 'project' => ask("What's the project called:", true) }
			end

			# Prompt for details about a contact
			def contact
				{
					'name'      => ask("Name:", true),
					'address_1' => ask("Address Line 1:", true),
					'address_2' => ask("Address Line 2:", true),
					'phone'     => ask("Phone Number:"),
					'email'     => ask("Email Address:"),
				}
			end

			# Prompt for details about a the workers rates
			def rates
				rates = {}

				begin
					name  = ask("Task name:", true)
					price = ask("Hourly Rate:", true).to_f * 100

					rates.store(name, price)
					puts
				end while Prompt.ask_yn "Would you like to add another work type?"

				rates
			end

			# Prompt for details about a entry
			def entry
				{ 'description' => read_editor }
			end

			# Read data from the EDITOR by creating a temproray file and waiting
			# for it to be saved
			def read_editor
				file = Tempfile.new('clocker')
				system("#{ENV['EDITOR']} #{file.path}")
				contents = file.open.read.strip
				file.delete

				contents
			end

			# Ask for input and recieve an answer
			def ask(question, required = false)
				begin
					print question + " "
					answer = gets.strip
				end while required and answer.empty?
				answer
			end

			# Ask for a yes or no answer
			def ask_yn(question)
				begin
					answer = ask(question + ' [y/n]', true).downcase
				end until %w[y n].include? answer
				answer == 'y'
			end

			# Ask for a selection from a list of items
			def ask_list(list, question)
				list = list.to_a

				# List out the selection options
				puts
				list.each_with_index do |name, i|
					puts " #{i + 1}) #{name}"
				end
				puts

				# Ask for a selection
				begin
					answer = ask(question, true).to_i
				end until answer > 0 and answer <= list.size

				list[answer - 1]
			end
		end

		# Commands that may be run
		module Commands

			CLI_TIME_FORMAT = '%m/%d/%y %I:%M %p'

			class InvalidCommand < StandardError; end
			class NoCommandGiven < StandardError; end

			# Initalize the CLOCKER_FILE, prompting for values
			def init
				details = CLOCKER_SKEL
				details.merge! Prompt.project

				puts
				puts "Please provide information about the client"
				details['client'] = Prompt.contact

				puts
				puts "Please provide information about yourself (the worker)"
				details['worker'] = Prompt.contact

				puts
				puts "Please enter the different billable rates"
				details['rates'] = Prompt.rates

				clocker_file.create details
				puts
				puts "Created new #{clocker_file.file_name} in the current directory!".green
			end

			# Start the clock
			def start
				raise Clockerfile::NotFound unless @clocker_file.exists?
				raise Clockerfile::AllreadyClockedIn if @clocker_file.clocked_in?

				now = Time.now
				clocker_file['clocked_in'] = now

				puts "You're now on the clock!"
				puts "Starting entry recorded at " + now.strftime(CLI_TIME_FORMAT).blue
			end

			# Cancel the current running clock
			def cancel
				raise Clockerfile::NotFound unless @clocker_file.exists?
				raise Clockerfile::NotClockedIn unless @clocker_file.clocked_in?

				clocker_file['clocked_in'] = false
			end

			# Stop the clock and prompt for a description of the work done
			def stop
				raise Clockerfile::NotFound unless @clocker_file.exists?
				raise Clockerfile::NotClockedIn unless @clocker_file.clocked_in?

				entry =
				{
					'from' => clocker_file['clocked_in'],
					'till' => Time.now,
				}

				rates = clocker_file['rates'].keys
				entry.merge! 'type' => Prompt.ask_list(rates, "What type of work was this?")

				entry.merge! Prompt.entry

				clocker_file.add_entry entry
				clocker_file['clocked_in'] = false
			end

			# Add a un-clocked entry based on user input
			def add
				raise Clockerfile::NotFound unless @clocker_file.exists?

			end

			# Remove all of the entries from the Clockerfile
			def clear
				raise Clockerfile::NotFound unless @clocker_file.exists?

				if Prompt.ask_yn("This will remove ALL of your current entries, are you sure?")
					clocker_file['entries'] = []
				end
			end

			# Print out the current status of the CLOCKER_FILE.
			def status
				raise Clockerfile::NotFound unless @clocker_file.exists?

			end

			# List all of the current clocked entries
			def list
				raise Clockerfile::NotFound unless @clocker_file.exists?

			end

			# Generate a PDF invoice from the current clocked entries
			def invoice
				raise Clockerfile::NotFound unless @clocker_file.exists?

			end
		end

		include Commands

		attr_accessor :clocker_file

		# Start the CLI handler for clocker
		def initialize(argv)
			@argv = argv
			@clocker_file = Clockerfile.load DEFAULT_FILE

			command = @argv.shift

			begin
				raise Commands::NoCommandGiven if command.nil?
				raise Commands::InvalidCommand unless Commands.instance_methods.include? command.to_sym

				send command
			rescue Commands::NoCommandGiven
				abort "Please specify a command"
			rescue Commands::InvalidCommand
				abort "The command '#{command}' is invalid"
			rescue Clockerfile::NotFound
				abort "No #{@clocker_file.file_name} found, run 'clocker init' to create one"
			rescue Clockerfile::Exists
				abort "#{@clocker_file.file_name} already exists!"
			rescue Clockerfile::AllreadyClockedIn
				abort "You're already on the clock"
			rescue Clockerfile::NotClockedIn
				abort "You aren't currently on the clock, run 'clocker start' to clock in"
			end

			@clocker_file.save
		end
	end
end

# Start Clocker
Clocker::CLI.new(ARGV)
